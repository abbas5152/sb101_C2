Q2B) Write a program that will result in a deadlock. How will you fix deadlock in Java show with
examples?
A2B) Deadlock means two synchronized Thread waiting for each other.

    Example:
    class A {
    public synchronized void funA(B b1){
    System.out.println("funA of A starts with B as parameter");
    b1.fun2();
    System.out.println("funA of A ends");
    }
    public synchronized void fun1(){
    System.out.println("inside fun1 of A");
    }
    }

    //Here we created A class in which one method takes parameter as B and same for B class too.
    //In this condition both are interdependent.


    class B {
    public synchronized void funB(A a1){
    System.out.println("funB of B starts with A as Parameter");
    a1.fun1();
    System.out.println("funB of B ends");
    }
    public synchronized void fun2(){
    System.out.println("inside fun2 of B");
    }
    }



    //created thread with the help of class A and B
    class ThreadA extends Thread{
    A a1;
    B b1;
    public ThreadA(A a1,B b1) {
    this.b1=b1;
    this.a1=a1;
    }
    @Override
    public void run() {
    a1.funA(b1);
    }
    }


    class ThreadB extends Thread{
    A a1;
    B b1;
    public ThreadB(A a1,B b1) {
    this.b1=b1;
    this.a1=a1;
    }
     public void run() {
        b1.funB(a1);
        }
        }


        class Main {
        public static void main(String[] args) {
        A a1 = new A();
        B b1 = new B();
        ThreadA t1 = new ThreadA(a1, b1);
        ThreadB t2 = new ThreadB(a1, b1);
        t1.start();
        t2.start();
        }
        }

//here two threads are synchronized and also waiting for each other this is condition for deadlock.
In this if we have to remove this Deadlock we have to remove Synchronized keyword from method
signature.
